##GENERATE OPENSSL
# sudo openssl req -x509 -newkey rsa:4096 -keyout localhost.key.pem -out localhost.cert.pem -sha256 -days 365
# sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
# generate file passwd.txt with PEM password in plain text

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
#
upstream flask{
                server 127.0.0.1:29000;
        }
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name localhost;
        return 302 https://$server_name$request_uri;

#       rewrite ^/(.*)/$ /$1;
}
server{
        rewrite ^([.*]|[^.]*[^/])$ $1/ permanent;
        # SSL configuration
        #
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        ssl_password_file passwd.txt;

#ssl on;
        ssl_certificate     localhost.cert.pem;
        ssl_certificate_key localhost.key.pem;
        include snippets/ssl-params.conf;
        #ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        #ssl_ciphers         HIGH:!aNULL:!MD5;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
#               include uwsgi_params;
#                       uwsgi_pass unix:/opt/flask/python/myproject.sock;

                try_files $uri $uri/ =404;
        }

        location /images/{
                autoindex on;
                auth_basic "Restricted Content";
                auth_basic_user_file /etc/nginx/.htpasswd;
        }
        location /forbiden/ {
                autoindex on;
                deny all;
        }
        #location /flask { try_files $uri @myproject; }
        location /flask {

                rewrite /flask/(.+) /$1 break;
                include uwsgi_params;
                uwsgi_pass flask;

                uwsgi_param Host $host;
                uwsgi_param X-Real-IP $remote_addr;
                uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
                uwsgi_param X-Forwarded_Proto $http_x_forwarded_proto;
        }


        #location /info.php {
        #    fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #    fastcgi_pass unix:/var/run/php8.1-fpm.sock;
        #    fastcgi_index index.php;
        #    include fastcgi.conf;
        #}
        #location php/info.php{
        #       fastcgi_param REQUEST_METHOD $request_method;
        #       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # pass PHP scripts to FastCGI server
        #
         location ~ \.php$ {
                include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
                fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}